// Code generated by MockGen. DO NOT EDIT.
// Source: item_service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "github.com/getumen/gogo_crawler/domains/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockItemService is a mock of ItemService interface
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// SaveResponse mocks base method
func (m *MockItemService) SaveResponse(ctx context.Context, in <-chan *models.Response) {
	m.ctrl.Call(m, "SaveResponse", ctx, in)
}

// SaveResponse indicates an expected call of SaveResponse
func (mr *MockItemServiceMockRecorder) SaveResponse(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResponse", reflect.TypeOf((*MockItemService)(nil).SaveResponse), ctx, in)
}
