// Code generated by MockGen. DO NOT EDIT.
// Source: http_client_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"
)

// MockHttpClientRepository is a mock of HttpClientRepository interface
type MockHttpClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientRepositoryMockRecorder
}

// MockHttpClientRepositoryMockRecorder is the mock recorder for MockHttpClientRepository
type MockHttpClientRepositoryMockRecorder struct {
	mock *MockHttpClientRepository
}

// NewMockHttpClientRepository creates a new mock instance
func NewMockHttpClientRepository(ctrl *gomock.Controller) *MockHttpClientRepository {
	mock := &MockHttpClientRepository{ctrl: ctrl}
	mock.recorder = &MockHttpClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpClientRepository) EXPECT() *MockHttpClientRepositoryMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHttpClientRepository) Do(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHttpClientRepositoryMockRecorder) Do(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientRepository)(nil).Do), req)
}

// Get mocks base method
func (m *MockHttpClientRepository) Get(url string) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHttpClientRepositoryMockRecorder) Get(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpClientRepository)(nil).Get), url)
}

// Head mocks base method
func (m *MockHttpClientRepository) Head(url string) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Head", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (mr *MockHttpClientRepositoryMockRecorder) Head(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHttpClientRepository)(nil).Head), url)
}

// Post mocks base method
func (m *MockHttpClientRepository) Post(url, contentType string, body io.Reader) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockHttpClientRepositoryMockRecorder) Post(url, contentType, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpClientRepository)(nil).Post), url, contentType, body)
}

// PostForm mocks base method
func (m *MockHttpClientRepository) PostForm(url string, data url.Values) (*http.Response, error) {
	ret := m.ctrl.Call(m, "PostForm", url, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm
func (mr *MockHttpClientRepositoryMockRecorder) PostForm(url, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockHttpClientRepository)(nil).PostForm), url, data)
}
